---
- hosts: postgresql
  become: yes

  vars_files:
    - postgresql-vars.yml

  pre_tasks:
    - name: "Install packages"
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      with_items:
        - postgresql
        - postgresql-client
        - postgresql-contrib

    - name: "Install Python packages"
      pip:
        name: "{{ item }}"
        state: present
      with_items:
        - psycopg2-binary

    - name: "Create postgres group"
      group:
        name: postgres
        state: present

    - name: "Create postgres user"
      user:
        name: postgres
        group: postgres
        system: yes
        shell: /bin/bash
        createhome: yes

    - name: "Find initdb path"
      command: "find /usr -name initdb"
      register: initdb_path
      failed_when: initdb_path.rc != 0

    - name: "Debug initdb path"
      debug:
        var: initdb_path

    - name: "Set initdb path"
      set_fact:
        initdb_path: "{{ initdb_path.stdout_lines[0] }}"
      when: initdb_path.stdout_lines | length > 0

  tasks:
    - name: "Check if PostgreSQL data directory exists and is non-empty"
      stat:
        path: "/var/lib/postgresql/14/main"
      register: postgres_data_dir

    - name: "Check if PostgreSQL data directory is non-empty"
      command: "ls -A /var/lib/postgresql/14/main"
      register: postgres_data_dir_contents
      when: postgres_data_dir.stat.exists
      failed_when: postgres_data_dir_contents.rc != 0

    - name: "Find out if PostgreSQL is initialized"
      ansible.builtin.stat:
        path: "/etc/postgresql/14/main/pg_hba.conf"
      register: postgres_data

    - name: "Initialize PostgreSQL"
      command: "sudo -u postgres {{ initdb_path }} -D /var/lib/postgresql/14/main"
      when:
        - not postgres_data.stat.exists
        - not postgres_data_dir.stat.exists or postgres_data_dir_contents.stdout == ""

    - name: "Start and enable PostgreSQL service"
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: "Configure PostgreSQL to allow password authentication for local connections"
      lineinfile:
        path: /etc/postgresql/14/main/pg_hba.conf
        regexp: '^local\s+all\s+all\s+peer'
        line: 'local   all             all                                     md5'
        state: present

    - name: "Configure PostgreSQL to listen on all addresses"
      lineinfile:
        path: /etc/postgresql/14/main/postgresql.conf
        regexp: '^#listen_addresses = '
        line: "listen_addresses = '*'"
        state: present
      notify: restart postgres

    - name: "Allow md5 connection for all hosts"
      lineinfile:
        path: /etc/postgresql/14/main/pg_hba.conf
        line: "host    all             all             0.0.0.0/0               md5"
        state: present
      notify: restart postgres

    - name: "Include Radarr database setup tasks"
      include_tasks: postgresql-radarr.yml

  handlers:
    - name: restart postgres
      service:
        name: postgresql
        state: restarted
